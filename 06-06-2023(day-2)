5. Best Time to Buy and Sell Stock

class Solution
{
    public:
        int maxProfit(vector<int> &prices)
        {
            ios_base::sync_with_stdio(false);
            cin.tie(NULL);
           	//             int minSoFar = prices[0], maxProfit = 0, currProfit = 0;

           	//             for (auto &v: prices)
           	//             {
           	//                 minSoFar = min(minSoFar, v);
           	//                 currProfit = v - minSoFar;
           	//                 maxProfit = max(currProfit, maxProfit);
           	//             }
           	//             return maxProfit;

           	//             preprocessing method

            int n = prices.size(), currMax = INT_MIN;
            vector<int> pre(n);

            for (int i = n - 1; i >= 0; i--)
            {
                currMax = max(currMax, prices[i]);
                pre[i] = currMax;
            }

            int ans = INT_MIN;
            for (int i = 0; i < n; i++)
            {
                int val = prices[i];
                ans = max(ans, pre[i] - val);
            }

            return ans;
        }
};

6. Rotate image

class Solution
{
    public:
        void rotate(vector<vector < int>> &matrix)
        {
            int r = matrix.size(), c = matrix[0].size();

            for (int i = 0; i < r; i++)
            {
                for (int j = 0; j <= i; j++)
                {
                    swap(matrix[i][j], matrix[j][i]);
                }
            }

            for (int i = 0; i < r; i++)
            {
                for (int j = 0; j < (c / 2); j++)
                {
                    swap(matrix[i][j], matrix[i][c - j - 1]);
                }
            }
        }
};

7. Merge Overlapping Subintervals


//using stack
class Solution
{
    public:
        vector<vector < int>> merge(vector<vector < int>> &arr)
        {
            sort(arr.begin(), arr.end());
            int n = arr.size(), i = 0;
            vector<vector < int>> ans;
            stack<pair<int, int>> stk;
            for (int i = 0; i < n; i++)
            {
                if (stk.empty())
                {
                    stk.push({ arr[i][0],
                        arr[i][1] });
                }
                else
                {
                    pair<int, int> temp = stk.top();
                    stk.pop();
                    if (arr[i][0] >= temp.first and arr[i][0] <= temp.second)
                    {
                        stk.push({ temp.first,
                            max(temp.second, arr[i][1]) });
                    }
                    else
                    {
                        stk.push(temp);
                        stk.push({ arr[i][0],
                            arr[i][1] });
                    }
                }
            }

            while (!stk.empty())
            {
                vector<int> temp;
                temp.push_back(stk.top().first);
                temp.push_back(stk.top().second);
                ans.push_back(temp);
                stk.pop();
            }

            return ans;
        }
};

//using vector
class Solution
{
    public:
        vector<vector < int>> merge(vector<vector < int>> &arr)
        {
            sort(arr.begin(), arr.end());
            int n = arr.size(), i = 0;
            vector<vector < int>> ans;
            while (i < n)
            {
                int low = arr[i][0], high = arr[i][1];
                i++;
                while (i < n and arr[i][0] >= low and arr[i][0] <= high)
                {
                    high = max(high, arr[i][1]);
                    i++;
                }

                vector<int> temp;
                temp.push_back(low);
                temp.push_back(high);
                ans.push_back(temp);
            }

            return ans;
        }
};

8. Merge sorted array
class Solution {
    public void merge(int[] a, int m, int[] b, int n) {
        if(m==0)
        {
            for(int i=0;i<n;i++)
            {
                a[i]=b[i];
            }
            return;
        }
        if(n==0)
        {
            return;
        }
        int i, j, k;
        i=j=k=0;
        int c[] = new int[m+n];
        while(i<m && j<n)
        {
            if(a[i]<b[j])
            {
                c[k++]=a[i++];
            }
            else if(b[j]<a[i])
            {
                c[k++]=b[j++];
            }
            else
            {
                c[k++]=a[i];
                c[k++]=a[i++];
                j++;
            }
        }
        for(;i<m;i++)
        {
            c[k++]=a[i];
        }
        for(;j<n;j++)
        {
            c[k++]=b[j];
        }
        for(i=0;i<m+n;i++)
        {
            a[i]=c[i];
        }
    }
}
