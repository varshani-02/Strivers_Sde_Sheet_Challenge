21. Remove Nth Node From End of List

class Solution
{
    public:
        ListNode* removeNthFromEnd(ListNode *head, int n)
        {
            ListNode *fast = head, *slow = head;

            for (int i = 0; i < n and fast; i++)
            {
                fast = fast->next;
            }

            if (!fast)
            {
                return slow->next;
            }

            while (fast->next)
            {
                fast = fast->next;
                slow = slow->next;
            }

            slow->next = slow->next->next;
            return head;
        }
};

22. Add two numbers as linked list

{
    public:
        ListNode* addTwoNumbers(ListNode *l1, ListNode *l2)
        {
            ListNode *ans = nullptr, *k = nullptr, *p = l1, *q = l2;
            int carry = 0;
            while (p and q)
            {
                int temp = p->val + q->val + carry;
                int sum = temp % 10;
                carry = temp / 10;
                if (!k)
                {
                    k = new ListNode(sum);
                    ans = k;
                }
                else
                {
                    ListNode *temp2 = new ListNode(sum);
                    k->next = temp2;
                    k = k->next;
                }
                p = p->next;
                q = q->next;
            }
            while (p)
            {
                int temp = p->val + carry;
                int sum = temp % 10;
                carry = temp / 10;
                if (!k)
                {
                    k = new ListNode(sum);
                    ans = k;
                }
                else
                {
                    ListNode *temp2 = new ListNode(sum);
                    k->next = temp2;
                    k = k->next;
                }
                p = p->next;
            }
            while (q)
            {
                int temp = q->val + carry;
                int sum = temp % 10;
                carry = temp / 10;
                if (!k)
                {
                    k = new ListNode(sum);
                    ans = k;
                }
                else
                {
                    ListNode *temp2 = new ListNode(sum);
                    k->next = temp2;
                    k = k->next;
                }
                q = q->next;
            }
            if (carry != 0)
            {
                ListNode *temp2 = new ListNode(carry);
                k->next = temp2;
            }
            return ans;
        }
};

23. Delete Node in a Linked List

class Solution
{
    public:
        void deleteNode(ListNode *node)
        {
            node->val = node->next->val;
            node->next = node->next->next;
        }
};

24. Intersection of Two Linked Lists

class Solution
{
    public:
        ListNode* getIntersectionNode(ListNode *a, ListNode *b)
        {
            if (!a or!b)
            {
                return nullptr;
            }

            ListNode *p = a, *q = b;

            while (p != q)
            {
                p = p == nullptr ? b : p->next;
                q = q == nullptr ? a : q->next;
            }
            return p;
        }
};
