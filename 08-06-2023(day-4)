13.  Majority Element
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        
        return nums[nums.size()/2];
    }
};
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0, num=0;
        for(auto &val:nums)
        {
            count==0?num=val:num=num;
            val==num?count++:count--;
        }
        return num;
    }
};

14. Majority Element II

class Solution
{
    public:
        vector<int> majorityElement(vector<int> &nums)
        {
            vector<int> ans;
            vector<int> temp = { -1,
                -1,
                -1
            };
            if (nums == temp)
            {
                ans.push_back(-1);
                return ans;
            }
            int count1 = 0, count2 = 0, nums1 = -1, nums2 = -1;
            for (auto &val: nums)
            {
                if (val == nums1)
                {
                    count1++;
                }
                else if (val == nums2)
                {
                    count2++;
                }
                else if (count1 == 0)
                {
                    nums1 = val;
                    count1 = 1;
                }
                else if (count2 == 0)
                {
                    nums2 = val;
                    count2 = 1;
                }
                else
                {
                    count1--;
                    count2--;
                }
            }

            count1 = count2 = 0;
            for (auto &val: nums)
            {
                if (val == nums1) count1++;
                if (val == nums2) count2++;
            }

            if (count1 > nums.size() / 3)
            {
                ans.push_back(nums1);
            }
            if (count2 > nums.size() / 3)
            {
                ans.push_back(nums2);
            }
            return ans;
        }
};

15. Two Sum
class Solution
{
    public:
        vector<int> twoSum(vector<int> &nums, int target)
        {
            unordered_map<int, int> m;
            vector<int> ans;
            for (int i = 0; i < nums.size(); i++)
            {
                int val = nums[i];
                if (m.find(target - val) != m.end())
                {
                    ans.push_back(m[target - val]);
                    ans.push_back(i);
                    return ans;
                }
                m[val] = i;
            }
            return ans;
        }
};

16. 4Sum

class Solution
{
    public:
        vector<vector < int>> fourSum(vector<int> &nums, int target)
        {
            set<vector < int>> ans;
            int n = nums.size();
            long long sum = 0;
            sort(nums.begin(), nums.end());
            for (int i = 0; i < n - 3; i++)
            {
                if (i > 0 and nums[i] == nums[i - 1]) continue;
                for (int j = i + 1; j < n - 2; j++)
                {
                    if (j > i + 1 and nums[j] == nums[j - 1]) continue;
                    int left = j + 1, right = n - 1;
                    while (left < right)
                    {
                        sum = nums[i] + nums[j];
                        sum += nums[left];
                        sum += nums[right];
                        if (sum == target)
                        {
                            ans.insert({ nums[i],
                                nums[j],
                                nums[left],
                                nums[right] });
                            left++;
                        }
                        else if (sum > target)
                        {
                            right--;
                        }
                        else
                        {
                            left++;
                        }
                    }
                }
            }
            vector<vector < int>> finalAns(ans.begin(), ans.end());
            return finalAns;
        }
};
