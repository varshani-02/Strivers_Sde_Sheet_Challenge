36. Set Matrix Zeroes

class Solution
{
    public:
        void setZeroes(vector<vector <int>> &vec)
        {
            int m = vec.size(), n = vec[0].size();
            unordered_set<int> r, c;
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (vec[i][j] == 0)
                    {
                        r.insert(i);
                        c.insert(j);
                    }
                }
            }
            for (int i = 0; i < m; i++)
            {
                for (int j = 0; j < n; j++)
                {
                    if (r.find(i) != r.end() or c.find(j) != c.end())
                    {
                        vec[i][j] = 0;
                    }
                }
            }
        }
};

37. pow(x,n)

class Solution
{
    public:
        double myPow(double x, int n)
        {
            int y = abs(n);
            double ans = 1.0;
            while (y>0)
            {
                if (y & 1)
                {
                    ans *= x;
                }
                x *= x;
                y /= 2;
            }

            return n < 0 ? 1 / ans : ans;
        }
};

38. Unique Paths

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 1));
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
};


39. Largest sub array with 0 sum
class Solution{
    public:
    int maxLen(vector<int>&a, int n)
    {   
        // Your code here
        unordered_map<int, int> s;
        int ans=0, i=0, sum=0;
        while(i<n)
        {
            sum+=a[i];
            if(sum==0)
            {
                ans=max(ans, i+1);
            }
            else if(s.find(sum)!=s.end())
            {
                ans=max(ans, i-s[sum]);
            }
            else
            {
                s[sum]=i;
            }
            i++;
        }
        return ans;
    }
};
