33. Trapping rain water 
class Solution
{
    public:
        int trap(vector<int> &height)
        {
           
            int n = height.size();
            int maxLeft = height[0], maxRight = height[n - 1], left = 1, right = n - 2, ans = 0;

            while (left <= right)
            {
                if (maxLeft <= maxRight)
                {
                    if (height[left] > maxLeft)
                    {
                        maxLeft = height[left];
                    }
                    else
                    {
                        ans += maxLeft - height[left];
                    }
                    left++;
                }
                else
                {
                    if (height[right] > maxRight)
                    {
                        maxRight = height[right];
                    }
                    else
                    {
                        ans += maxRight - height[right];
                    }
                    right--;
                }
            }
            return ans;
        }
};

34. Remove duplicates from sorted array
class Solution {
public:
int removeDuplicates(vector<int> &v)
{
    set<int> s;
    for (auto &val : v)
    {
        s.insert(val);
    }
    int i = 0;
    for (auto &val : s)
    {
        v[i++] = val;
    }
    return s.size();
}
};

35. Max consecutive ones
https://leetcode.com/problems/max-consecutive-ones/
class Solution
{
    public:
        int findMaxConsecutiveOnes(vector<int> &nums)
        {
            int curr = 0, ans = INT_MIN;
            for (int i = 0; i < nums.size(); i++)
            {
                if (nums[i] == 1)
                {
                    curr++;
                }
                else
                {
                    curr = 0;
                }
                ans = max(ans, curr);
            }
            return ans;
        }
};
