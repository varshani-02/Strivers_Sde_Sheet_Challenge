9. Find the Duplicate Number

class Solution
{
    public:
        int findDuplicate(vector<int> &nums)
        {
            int slow = 0, fast = 0;

            do {
                slow = nums[slow];
                fast = nums[nums[fast]];
            } while (slow != fast);

            slow = 0;

            do {
                slow = nums[slow];
                fast = nums[fast];
            } while (slow != fast);

            return slow;
        }
};

10. find repeated and missing number

vector<int> Solution::repeatedNumber(const vector<int> &v) 
{
     long long actual2, given2, actual, given, n = v.size();
    actual2 = given2 = actual = given = 0;
    actual = (n * (n + 1)) / 2;
    actual2 = (n * (n + 1) * (2 * n + 1)) / 6;
    for (auto &val : v)
    {
        given += (long long)val;
        given2 += ((long long)val * (long long)val);
    }
    long long a = actual - given;
    long long k = (actual2 - given2) / a;
    long long m = (k + a) / 2;
    long long r = m - a;
    vector<int> ans{r,m};
    return ans;
}

11. count inversions

#include <bits/stdc++.h> 
    long long ans=0;
     long long  an;
    void merge(long long a[],  long long  l,  long long  m,  long long  h)
    {
         long long  temp[an], i=l, j=m, k=0;
        while(i<m and j<=h)
        {
            if(a[i]<=a[j])
            {
                temp[k++]=a[i++];
            }
            else
            {
                temp[k++]=a[j++];
                
                ans+=(m-i);
            }
            
        }
        
        while(i<m)
        {
            temp[k++]=a[i++];
        }
        while(j<=h)
        {
            temp[k++]=a[j++];
        }
        k=0;
        for(int i=l; i<=h; i++)
        {
            a[i]=temp[k++];
        }
    }
    void mergeSort(long long arr[],  long long  l,  long long  h)
    {
         long long  m=(l+h)/2;
        if(l<h)
        {
            mergeSort(arr, l, m);
            mergeSort(arr, m+1, h);
            
            merge(arr, l, m+1, h);
            
        }
    }
long long getInversions(long long *arr, int n){
    // Write your code here.
    an=n;
    mergeSort(arr, 0, n-1);
    return ans;
}

12. search in a 2d matrix

class Solution
{
    public:
        bool searchMatrix(vector<vector < int>> &matrix, int target)
        {
            int m = matrix.size(), n = matrix[0].size();
            int lo = 0, hi = m *n - 1;

            while (lo <= hi)
            {
                int mid = lo + (hi - lo) / 2;

                int key = matrix[mid / n][mid % n];

                if (key == target)
                {
                    return true;
                }
                else if (key > target)
                {
                    hi = mid - 1;
                }
                else
                {
                    lo = mid + 1;
                }
            }

            return 0;
        }
};
